// const mongodb = require('mongodb');
// const MongoClient =  mongodb.MongoClient;
// const ObjectID = mongodb.ObjectID;

const { MongoClient, ObjectID } = require('mongodb'); //destructuring the object

const connectionURL = 'mongodb://127.0.0.1:27017'; //localhost = 127.0.0.1, but localhost sometimes gives errors
const databaseName = 'task-manager';

// const id = new ObjectID(); // Used to generate Ids, id is a binary data
// console.log(id); //id is made up of timestamp and some random data
// console.log(id.id.length); //length of binary id
// console.log(id.toHexString()); //convert id to string
// console.log(id.toHexString().length); //length of string id
// console.log(id.getTimestamp()); //get timestamp of the id

MongoClient.connect(connectionURL, { useNewUrlParser: true }, (error, client) => { //connect to database
  if(error){
    return console.log('Unable to connect to database');
  }

  console.log('Connected to database!!');
  const db = client.db(databaseName);

  // 1
  // Insert one document to the collection
  // db.collection('users').insertOne({
  //   name: 'Rohit',
  //   age: 28
  // }, (error, result) => {
  //   if(error){
  //     return console.log('Unable to insert document');
  //   }
  //
  //   // console.log(result);
  //   console.log(result.ops);
  // });


  // 4
  //  Insert one document with id generated by code
  // db.collection('users').insertOne({
  //   _id: id,
  //   name: 'Rohit',
  //   age: 28,
  //   timestamp: id.getTimestamp()
  // }, (error, result) => {
  //   if(error){
  //     return console.log('Unable to insert document');
  //   }
  //
  //   // console.log(result);
  //   console.log(result.ops);
  // });


  // 2
  // Insert mutiple documents at once
  // db.collection('users').insertMany([
  //   {
  //     name: 'Some name',
  //     age: 12
  //   },
  //   {
  //     name: 'Someone',
  //     age: 20
  //   }
  // ], (error, result) => {
  //   if(error){
  //     return console.log('Unable to insert documents');
  //   }
  //
  //   console.log(result.ops);
  // });


  // 3
  // Insert mutiple documents at once(task)
  // db.collection('tasks').insertMany([
  //   {
  //     description: 'Complete task 1',
  //     completed: true
  //   },
  //   {
  //     description: 'Complete mongoDB section',
  //     completed: false
  //   },
  //   {
  //     description: 'Complete node course',
  //     completed: false
  //   }
  // ], (error, result) => {
  //   if(error){
  //     return console.log('Unable to insert the documents');
  //   }
  //
  //   console.log(result.ops);
  // });


  // 5
  // Read single document
  // db.collection('users').findOne({ name: 'Nrujal', age: 20 }, (error, user) => {
  // db.collection('users').findOne({ _id: new ObjectID("5cbdc87c5c95251e903b1391") }, (error, user) => {
  //   if(error){
  //     return console.log('Unable to fetch');
  //   }
  //
  //   console.log(user);
  // });


  // 6
  // Read multiple documents and turn to array
  // db.collection('users').find({ age: 20 }).toArray((error, users) => {
  //   if(error){
  //     return console.log('Unable to fetch users');
  //   }
  //   console.log(users);
  // });


  // 7
  // Read multiple documents and get count
  // db.collection('users').find({ age: 20 }).count((error, count) => {
  //   if(error){
  //     return console.log('Unable to fetch users');
  //   }
  //   console.log(count);
  // });


  // 8
  // Read single document using id(task)
  // db.collection('tasks').findOne({ _id: new ObjectID("5cbdc55e2c2c2615dc6284f2") }, (error, task) => {
  //   if(error){
  //     return console.log('No task with given id exists');
  //   }
  //   console.log(task);
  // });


  // 9
  // Get all incomplete tasks(task)
  // db.collection('tasks').find({ completed: false }).toArray((error, tasks) => {
  //   if(error){
  //     return console.log('No incomplete tasks');
  //   }
  //
  //   console.log(tasks);
  // });


  // 10
  // Update data in a document
  // const updatePromise = db.collection('users').updateOne({
  //   _id: new ObjectID("5cbdc449489ce427d8b27cae")
  // },{
  //   $set:{
  //     name: 'Brijesh'
  //   }
  // });
  //
  // updatePromise.then((result) => {
  //   console.log(result);
  // }).catch((error) => {
  //   console.log(error);
  // });


  // 11
  // Same as 10
  // db.collection('users').updateOne({
  //   _id: new ObjectID("5cbdc449489ce427d8b27cae")
  // },{
  //   $set:{
  //     name: 'Brijesh Bhalodiya'
  //   }
  // }).then((result) => {
  //   console.log(result);
  // }).catch((error) => {
  //   console.log(error);
  // });


  // 12
  // Increment the age
  // db.collection('users').updateOne({
  //   _id: new ObjectID("5cbdc449489ce427d8b27cae")
  // },{
  //   $inc:{
  //     age: 7
  //   }
  // }).then((result) => {
  //   console.log(result.modifiedCount);
  // }).catch((error) => {
  //   console.log(error);
  // });

  // 13
  // Unset a field
  // db.collection('users').updateOne({
  //   _id: new ObjectID("5cbdc87c5c95251e903b1391")
  // },{
  //   $unset:{
  //     timestamp: ""
  //   }
  // }).then((result) => {
  //   console.log(result.modifiedCount);
  // }).catch((error) => {
  //   console.log(error);
  // });


  // 14
  // Use updateMany to manipulate datain tasks collection(task)
  // db.collection('tasks').updateMany({
  //   completed: false
  // },{
  //   $set:{
  //     completed: true
  //   }
  // }).then((result) => {
  //   console.log(result.modifiedCount);
  // }).catch((error) => {
  //   console.log(error);
  // });


  // 15
  // Delete mutiple data
  // db.collection('users').deleteMany({
  //   age: 20
  // }).then((result) => {
  //   console.log(result.deletedCount);
  // }).catch((error) => {
  //   console.log(error);
  // });


  // 16
  // Use deleteOne(task)
  db.collection('tasks').deleteOne({
    description: "Complete task 1"
  }).then((result) => {
    console.log(result.deletedCount);
  }).catch((error) => {
    console.log(error);
  })


});
